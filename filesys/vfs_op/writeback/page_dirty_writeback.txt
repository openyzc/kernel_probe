

int set_page_dirty(struct page *page)

区分 page_mapping(page) 是否为NULL。

如果 为 NULL，表示该page 是对应 anonymous 或 slab的，具有swap-cache的
page不在这里。
	if (!PageDirty(page)) {
		if (!TestSetPageDirty(page))
			return 1;
	}
	return 0;

也就是只有 page 结构中的 pagedirty 标志，没有 address_space中radix-tree的flag.


如果为 !NULL, 有
	if (likely(mapping)) {
		int (*spd)(struct page *) = mapping->a_ops->set_page_dirty;
		/*
		 * readahead/lru_deactivate_page could remain
		 * PG_readahead/PG_reclaim due to race with end_page_writeback
		 * About readahead, if the page is written, the flags would be
		 * reset. So no problem.
		 * About lru_deactivate_page, if the page is redirty, the flag
		 * will be reset. So no problem. but if the page is used by
		 * readahead
		 * it will confuse readahead and make it restart the size rampup
		 * process. But it's a trivial problem.
		 */
		if (PageReclaim(page))
			ClearPageReclaim(page);
#ifdef CONFIG_BLOCK
		if (!spd)
			spd = __set_page_dirty_buffers;
#endif
		return (*spd)(page);
	}

对于 ext4, mapping->a_ops->set_page_dirty 指向
ext4_set_page_dirty，实际上还是调用 __set_page_dirty_buffers。

int __set_page_dirty_buffers(struct page *page)
{
	int newly_dirty;
	struct address_space *mapping = page_mapping(page);
	...
	lock_page_memcg(page);
/* 这里设置 page结构中的 pagedirty 标志*/
	newly_dirty = !TestSetPageDirty(page);
	spin_unlock(&mapping->private_lock);
/* 如果page的dirty标志是从0到1，那么调用 __set_page_dirty设置
 * radix-tree对应node中的 tag为PAGECACHE_TAG_DIRTY：
 *		radix_tree_tag_set(&mapping->page_tree,	
 *				page_index(page), PAGECACHE_TAG_DIRTY);
 */
	if (newly_dirty)
		__set_page_dirty(page, mapping, 1);

	unlock_page_memcg(page);

	if (newly_dirty)
		__mark_inode_dirty(mapping->host, I_DIRTY_PAGES);

	return newly_dirty;
}


可见对于 file-mapped, dirty有两处标志。


至于何时调用set_page_dirty()，部分参考：
http://tsecer.blog.163.com/blog/static/150181720172118949418/



如何使用 dirty标志WB？
do_writepages是wb的入口：

而 PAGECACHE_TAG_DIRTY 会在 generic_writepages --> write_cache_pages -->
tag_pages_for_writeback 中被转换为 PAGECACHE_TAG_TOWRITE。
待 真正的 执行writeback时又会被设置为 
	__writepage --> mapping->a_ops->writepage(page, wbc)

对于ext4, mapping->a_ops->writepages 存在且指向 ext4_writepages().
因此do_writepages中有：

int do_writepages(struct address_space *mapping, struct writeback_control *wbc)
{
	int ret;

	if (wbc->nr_to_write <= 0)
		return 0;
	while (1) {
		if (mapping->a_ops->writepages)
			ret = mapping->a_ops->writepages(mapping, wbc);
		else
			ret = generic_writepages(mapping, wbc);
		if ((ret != -ENOMEM) || (wbc->sync_mode != WB_SYNC_ALL))
			break;
		cond_resched();
		congestion_wait(BLK_RW_ASYNC, HZ/50);
	}
	return ret;
}

而在 ext4_writepages()中：
	if (wbc->sync_mode == WB_SYNC_ALL || wbc->tagged_writepages)
		tag_pages_for_writeback(mapping, mpd.first_page, mpd.last_page);
与 write_cache_pages()中类是的处理。



mpage_map_and_submit_extent --> mpage_map_and_submit_buffers -->
mpage_submit_page --> ext4_bio_write_page --> 

	if (keep_towrite)
		set_page_writeback_keepwrite(page);
	else
		set_page_writeback(page);


这里的 set_page_writeback 或 set_page_writeback_keepwrite 会调用到
__test_set_page_writeback --> TestSetPageWriteback 来设置 page中的
writeback标志，但是如下的处理有点疑问，这里还保留着 DIRTY?? 要等 end of
writeback的处理时才clear radix-tree tag中的 dirty标志(例如 end_page_writeback)
?:
		if (!PageDirty(page))
			radix_tree_tag_clear(&mapping->page_tree,
						page_index(page),
						PAGECACHE_TAG_DIRTY);

另外， ext4_bio_write_page 在 ext4_writepage 中也会被调用到。



