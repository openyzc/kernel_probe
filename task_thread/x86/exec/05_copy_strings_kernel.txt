

1. why do we need 'set_fs(KERNEL_DS)' in copy_strings_kernel?

There are two types of copy the user-space string to the kernel space in execv:

	retval = copy_strings_kernel(1, &bprm->filename, bprm);
	if (retval < 0)
		goto out;

	bprm->exec = bprm->p;
	retval = copy_strings(bprm->envc, envp, bprm);
	if (retval < 0)
		goto out;


int copy_strings_kernel(int argc, const char *const *__argv,
			struct linux_binprm *bprm)
{
	int r;
	mm_segment_t oldfs = get_fs();
	struct user_arg_ptr argv = {
		.ptr.native = (const char __user *const  __user *)__argv,
	};

	set_fs(KERNEL_DS);
	r = copy_strings(argc, argv, bprm);
	set_fs(oldfs);

	return r;
}

So, it is clear the core of copy_strings_kernel() is copy_strings().
The difference between copy_strings_kernel and copy_strings is the calling of
set_fs(KERNEL_DS) for copy_strings_Kernel.

The exact reason is copy_strings(int argc, struct user_arg_ptr argv,
			struct linux_binprm *bprm)
will check whether the user-space source address is in the valid
user-space/USER_DATA segment range based on the setting of
current->thread.addr_limit.

But for copy_strings_kernel(1, &bprm->filename, bprm), the 'bprm->filename' is a
pointer to kernel space after the do_execve(getname(filename), argv, envp). To
make copy_strings() pass the checking, we need to add 'set_fs(KERNEL_DS)' just
before the calling of copy_strings.

To clarify again, the kernel can access all the address space including the
user-land space. But if the input parameters are from user-space, it is more
safe and reasonable to check them in the right range.


2. Which definition of strnlen_user will be used?

There are two generic definitions of strnlen_user, one is in lib/strnlen_user.c,
another is include/asm-generic/uaccess.h;

Actually, the lib/strnlen_user.c is compiled by GENERIC_STRNLEN_USER which is
enabled in default on X86; And include/asm-generic/uaccess.h is only included on
some specific architectures, such as hexagon.

So, it is obvious to trace the lib/strnlen_user.c;


3. Why user_access_begin() is needed in strnlen_user()?

long strnlen_user(const char __user *str, long count)
{
	unsigned long max_addr, src_addr;

	if (unlikely(count <= 0))
		return 0;

	max_addr = user_addr_max();
	src_addr = (unsigned long)str;
	if (likely(src_addr < max_addr)) {
		unsigned long max = max_addr - src_addr;
		long retval;

		user_access_begin();
		retval = do_strnlen_user(str, count, max);
		user_access_end();
		return retval;
	}
	return 0;
}

To be honest, I don't know why here user_access_begin() is needed but missed in
get_user_arg_ptr(). Refer to the 'Determination of Access Rights' in X86
manual, it is better to call user_access_begin() to set the EFLAGS.AC = 1
because then accesing to any user-mode address from supervisor-mode is
permitted no matter what configures for CR4.SMAP;

The algorithm of do_strnlen_user is not understood. Someone can teach me?

4. Why does the copy_strings start from the end of the user string?

It seems the stack of the new thread is downstream for the argument list or
environment list.

Firstly, the bytes whose size is page offset will be copy, then the remain data
in the user string will be copyed at the page boundary.




