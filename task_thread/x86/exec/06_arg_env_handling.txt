

When the user process call the execv() syscall, some user-space parameters are
transferred to the kernel.
Just as the description in execv manual :

int execlp(const char *file, const char *arg, ...);
int execv(const char *path, char *const argv[]);
int execvp(const char *file, char *const argv[]);
int execvpe(const char *file, char *const argv[],
		char *const envp[]);

       The execv(), execvp(), and execvpe()  functions  provide  an  array  of
       pointers  to  null-terminated  strings that represent the argument list
       available to the new  program.   The  first  argument,  by  convention,
       should  point  to the filename associated with the file being executed.
       The array of pointers must be terminated by a NULL pointer.

       The execle() and execvpe() functions allow the caller  to  specify  the
       environment  of  the  executed program via the argument envp.  The envp
       argument is an array of pointers to null-terminated strings and must be
       terminated by a NULL pointer.  The other functions take the environment
       for the new process image from the external  variable  environ  in  the
       calling process.


How to process these parameters on kernel side?


1. count the argument list

	bprm->argc = count(argv, MAX_ARG_STRINGS);
	if ((retval = bprm->argc) < 0)
		goto out;

	bprm->envc = count(envp, MAX_ARG_STRINGS);
	if ((retval = bprm->envc) < 0)
		goto out;

count() will traverse the whole argument list to check whether the user pointer
is valid(Non-NULL), and increase the count number;

2. copy the binary file name as the first argument in the 'current' user-space
stack

	retval = copy_strings_kernel(1, &bprm->filename, bprm);
	if (retval < 0)
		goto out;

Here, once again, the 'bprm->filenmae' is in kernel space;

In bprm_mm_init() --> __bprm_mm_init(), the bprm->vma is setup as:
	vma->vm_end = STACK_TOP_MAX;
	vma->vm_start = vma->vm_end - PAGE_SIZE;
	vma->vm_flags = VM_SOFTDIRTY | VM_STACK_FLAGS |
		VM_STACK_INCOMPLETE_SETUP;
	vma->vm_page_prot = vm_get_page_prot(vma->vm_flags);
	...
	bprm->p = vma->vm_end - sizeof(void *);

So, the user-space stack should nearly at the top of the user-space.
But for CONFIG_STACK_GROWSUP, the 'vma->vm_end' here probably has a gap from the
user-space top; I haven't dive into the code for metag and parisc(these two
apply the STACK_GROWSUP at this moment), so this is probably not right.

After the copy_strings_kernel, will perform:
	bprm->exec = bprm->p;

Now, bprm->p points to the right position where binary file name is stored in
user-space stack.(Low start address)

3. handle the argument list

	retval = copy_strings(bprm->envc, envp, bprm);
	if (retval < 0)
		goto out;

Actually, the data of argument list will be copied one by one to the user-space
stack in a growdown mode.

We will analyse in detail later.

4. handle the optional environment list

	retval = copy_strings(bprm->argc, argv, bprm);
	if (retval < 0)
		goto out;





