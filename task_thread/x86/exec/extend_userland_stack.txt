

setup_arg_pages() will do this work.

int setup_arg_pages(struct linux_binprm *bprm,
		    unsigned long stack_top,
		    int executable_stack)
{
	...
	vm_flags = VM_STACK_FLAGS;

	if (unlikely(executable_stack == EXSTACK_ENABLE_X))
		vm_flags |= VM_EXEC;
	else if (executable_stack == EXSTACK_DISABLE_X)
		vm_flags &= ~VM_EXEC;
	vm_flags |= mm->def_flags;
	vm_flags |= VM_STACK_INCOMPLETE_SETUP;

	ret = mprotect_fixup(vma, &prev, vma->vm_start, vma->vm_end,
			vm_flags);

1. The above code updates the VM page table to the new 'vm_flags'

After setting the 'vm_flags' correctly, call this:

	ret = mprotect_fixup(vma, &prev, vma->vm_start, vma->vm_end,
			vm_flags);

The detail processes of mprotect_fixup() are:

	vma->vm_flags = newflags;
	dirty_accountable = vma_wants_writenotify(vma, vma->vm_page_prot);
	vma_set_page_prot(vma);

	change_protection(vma, start, end, vma->vm_page_prot,
			  dirty_accountable, 0);

	/*
	 * Private VM_LOCKED VMA becoming writable: trigger COW to avoid major
	 * fault on access.
	 */
	if ((oldflags & (VM_WRITE | VM_SHARED | VM_LOCKED)) == VM_LOCKED &&
			(newflags & VM_WRITE)) {
		populate_vma_page_range(vma, start, end, NULL);
	}

## change_protection() will update the corresponding page table entries;
## populate_vma_page_range(vma, start, end, NULL) will allocate the new physical
## pages for that userland VMA to support the COWed. Now, this COWed VMA will
## not use ZERO pages anymore;

2. moving the existing VMA to the right place

	if (stack_shift) {
		ret = shift_arg_pages(vma, stack_shift);
		if (ret)
			goto out_unlock;
	}

These points should be remembered:

## extend the original VMA to cover both the new and the old VMAs;

	if (vma_adjust(vma, new_start, old_end, vma->vm_pgoff, NULL))
		return -ENOMEM;

## apply the old PTEs of original VMA to the new PTEs of new VMA
	if (length != move_page_tables(vma, old_start,
				       vma, new_start, length, false))
		return -ENOMEM;

Please note that, the relevant physical pages will not be freed, and continue to
be used by the new VMA PTEs; Which is different from the unmap();

## Free the pages for the old page tables

	tlb_gather_mmu(&tlb, mm, old_start, old_end);
	if (new_end > old_start) {
		/*
		 * when the old and new regions overlap clear from new_end.
		 */
		free_pgd_range(&tlb, new_end, old_end, new_end,
			vma->vm_next ? vma->vm_next->vm_start :
			USER_PGTABLES_CEILING);
	} else {
		/*
		 * otherwise, clean from old_start; this is done to not touch
		 * the address space in [new_end, old_start) some architectures
		 * have constraints on va-space that make this illegal (IA64) -
		 * for the others its just a little faster.
		 */
		free_pgd_range(&tlb, old_start, old_end, new_end,
			vma->vm_next ? vma->vm_next->vm_start :
			USER_PGTABLES_CEILING);
	}
	tlb_finish_mmu(&tlb, old_start, old_end);

## Finally, adjust the range of VMA to the new one

	vma_adjust(vma, new_start, new_end, vma->vm_pgoff, NULL);

3. extend the stack VMA

What is the final stack size?

	stack_expand = 131072UL; /* randomly 32*4k (or 2*64k) pages */
	stack_size = vma->vm_end - vma->vm_start;

stack_size + stack_expand is the size we expect.
But it should not be over 'rlimit(RLIMIT_STACK) & PAGE_MASK';


So, the following will decide what is the stack end for GROWSUP stack, what is
the stack start for non-GROWSUP. The real stack size make effects on the
selection.

	rlim_stack = rlimit(RLIMIT_STACK) & PAGE_MASK;
#ifdef CONFIG_STACK_GROWSUP
	if (stack_size + stack_expand > rlim_stack)
		stack_base = vma->vm_start + rlim_stack;
	else
		stack_base = vma->vm_end + stack_expand;
#else
	if (stack_size + stack_expand > rlim_stack)
		stack_base = vma->vm_end - rlim_stack;
	else
		stack_base = vma->vm_start - stack_expand;
#endif

This call will finish the stack extend.
	ret = expand_stack(vma, stack_base);

Please note that, there are no any PTE initialization in expand_stack, just
update the VMA and the info in the RB tree and VMA list of struct mm_struct;

At last, we should set the current stack pointer for this thread:

	current->mm->start_stack = bprm->p;




