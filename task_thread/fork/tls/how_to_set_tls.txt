

set_tls_desc() will set the 'struct desc_struct
tls_array[GDT_ENTRY_TLS_ENTRIES]' of struct thread_struct when this thread is
forking.

When thread is switching, __switch_to --> load_TLS(next, cpu) -->
native_load_tls(t, cpu)

In native_load_tls(), a percpu struct gdt_page variable will be setup :

struct gdt_page {
	struct desc_struct gdt[GDT_ENTRIES];
} __attribute__((aligned(PAGE_SIZE)));

DECLARE_PER_CPU_PAGE_ALIGNED(struct gdt_page, gdt_page);


percpu varaible of gdt_page is an array whose entries are GDT entry.

static inline void native_load_tls(struct thread_struct *t, unsigned int cpu)
{
	struct desc_struct *gdt = get_cpu_gdt_rw(cpu);
	unsigned int i;

	for (i = 0; i < GDT_ENTRY_TLS_ENTRIES; i++)
		gdt[GDT_ENTRY_TLS_MIN + i] = t->tls_array[i];
}

So, native_load_tls() will store the 'struct desc_struct' entries relevant to
the TLS into the percpu GDT;


load_fixmap_gdt() can load the whole GDT Table based on GDT base + size into
gdtr throught 'load_gdt(&gdt_descr)';

Please note that, the whole percpu GDT table area will be fix-mapped by
setup_fixmap_gdt(cpu);






