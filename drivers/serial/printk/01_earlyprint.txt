
1. basic functions' definitions

1.1

include/linux/printk.h

--kernel configure entries

There are some basic functions relative to printk in this file, such as
pr_info...

To use all these basic functions, you should enable the kernel configure item,
CONFIG_PRINTK

This item is defined in init/Kconfig:

config PRINTK
	default y
	bool "Enable support for printk" if EXPERT

And EXPERT is defined in the same file as:

menuconfig EXPERT

You can find there are many items affected by EXPERT.

--type definitions

include/linux/compiler-gcc.h :

#define __printf(a, b)		__attribute__((format(printf, a, b)))

include/linux/printk.h :

static inline __printf(1, 2) __cold

#if GCC_VERSION >= 40300
#define __cold			__attribute__((__cold__))

as for this attribute, you can refer to:
http://stackoverflow.com/questions/109710/likely-unlikely-macros-in-the-linux-kernel-how-do-they-work-whats-their


--where is the definition of DEBUG?

#ifdef DEBUG
#define pr_devel(fmt, ...) \
		printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
#else
#define pr_devel(fmt, ...) \
		no_printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
#endif

I think it should be compile macro. But I am not so sure.
Please refer to:
drivers/base/Makefile:27:ccflags-$(CONFIG_DEBUG_DRIVER) := -DDEBUG

--functions definitions

#define pr_emerg(fmt, ...) \
		printk(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)
#define pr_alert(fmt, ...) \
		printk(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)
#define pr_crit(fmt, ...) \
		printk(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)
#define pr_err(fmt, ...) \
		printk(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)
#define pr_warning(fmt, ...) \
		printk(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)
#define pr_warn pr_warning
#define pr_notice(fmt, ...) \
		printk(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)
#define pr_info(fmt, ...) \
		printk(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)

So, we must know how to work in printk now...


1.2 Where is the stdarg.h

you can find the definition of printk() in kernel/printk/printk.c:

asmlinkage __visible int printk(const char *fmt, ...)
{
	printk_func_t vprintk_func;
	va_list args;
	int r;

	va_start(args, fmt);
	...

So, where is the definitons of va_list, va_start, va_end.

As we known, those macroes should be from standard c libraries, but you can
not find them among the kernel source tree.

After doing some browse by Google, someone said those macroes are defined in
stdarg.h, so, where is the stdarg.h??

In printk.c, there is this include line:
#include <linux/kernel.h> -->
#include <stdarg.h>

I wonder this stdarg.h is from the compiler. So I check the kernel compiling
output:

aarch64-linux-gnu-gcc -Wp,-MD,init/.do_mounts.o.d  -nostdinc -isystem
/home/yuan_zc/linaro/aarch64-toolchain/gcc-linux-gnu-4.8/bin/../lib/gcc/aarch64-linux-gnu/4.9.1/include
-I/home/yuan_zc/estuary/work_shop/open_estuary/kernel_ups/src/arch/arm64/include
-Iarch/arm64/include/generated/uapi -Iarch/arm64/include/generated
-I/home/yuan_zc/estuary/work_shop/open_estuary/kernel_ups/src/include
-Iinclude
-I/home/yuan_zc/estuary/work_shop/open_estuary/kernel_ups/src/arch/arm64/include/uapi
-Iarch/arm64/include/generated/uapi
-I/home/yuan_zc/estuary/work_shop/open_estuary/kernel_ups/src/include/uapi
-Iinclude/generated/uapi -include
/home/yuan_zc/estuary/work_shop/open_estuary/kernel_ups/src/include/linux/kconfig.h
-I/home/yuan_zc/estuary/work_shop/open_estuary/kernel_ups/src/init -Iinit
-D__KERNEL__ -mlittle-endian -Wall -Wundef -Wstrict-prototypes -Wno-trigraphs
-fno-strict-aliasing -fno-common -Werror-implicit-function-declaration
-Wno-format-security -std=gnu89 -mgeneral-regs-only
-fno-delete-null-pointer-checks -O2 --param=allow-store-data-races=0
-Wframe-larger-than=2048 -fstack-protector -Wno-unused-but-set-variable
-fno-omit-frame-pointer -fno-optimize-sibling-calls
-fno-var-tracking-assignments -g -gdwarf-4 -pg
-fno-inline-functions-called-once -Wdeclaration-after-statement
-Wno-pointer-sign -fno-strict-overflow -fconserve-stack -Werror=implicit-int
-Werror=strict-prototypes -Werror=date-time -DCC_HAVE_ASM_GOTO
-D"KBUILD_STR(s)=#s" -D"KBUILD_BASENAME=KBUILD_STR(do_mounts)"
-D"KBUILD_MODNAME=KBUILD_STR(mounts)" -c -o init/.tmp_do_mounts.o
/home/yuan_zc/estuary/work_shop/open_estuary/kernel_ups/src/init/do_mounts.c

Ok, you had found -isystem
/home/yuan_zc/linaro/aarch64-toolchain/gcc-linux-gnu-4.8/bin/../lib/gcc/aarch64-linux-gnu/4.9.1/include

We check this directory whether the stdarg.h is there:

yuan_zc@troy-Lenovo-Product:~/linaro/aarch64-toolchain/gcc-linux-gnu-4.8/lib/gcc/aarch64-linux-gnu/4.9.1/include$
ls
arm_neon.h  omp.h       stdatomic.h  stdfix.h      stdnoreturn.h
float.h     stdalign.h  stdbool.h    stdint-gcc.h  unwind.h
iso646.h    stdarg.h    stddef.h     stdint.h      varargs.h

OK. Now you find stdarg.h here!!

So, how the kernel make get this directory?

yuan_zc@troy-Lenovo-Product:~/linaro/work_dir/torvald_master/src$ grep -nrI
'\-isystem' . --include=Make*
./arch/powerpc/boot/Makefile:25:		 -isystem $(shell $(CROSS32CC)
		-print-file-name=include)
./Makefile:752:NOSTDINC_FLAGS += -nostdinc -isystem $(shell $(CC)
		-print-file-name=include)
yuan_zc@troy-Lenovo-Product:~/linaro/work_dir/torvald_master/src$ grep -nrI
'NOSTDINC_FLAGS' . --include=Make*
...
./scripts/Makefile.lib:157:c_flags        = -Wp,-MD,$(depfile)
$(NOSTDINC_FLAGS) $(LINUXINCLUDE)     \
./scripts/Makefile.lib:161:a_flags        = -Wp,-MD,$(depfile)
$(NOSTDINC_FLAGS) $(LINUXINCLUDE)     \
./scripts/Makefile.lib:164:cpp_flags      = -Wp,-MD,$(depfile)
$(NOSTDINC_FLAGS) $(LINUXINCLUDE)     \


You can see the definition in Makefile.lib of c_flags or cpp_flags or a_flags
will cover the NOSTDINC_FLAGS

Then how the c_flags is used?

you can find these variables like cmd_cc_o_c in scripts/Makefile.build:

ifndef CONFIG_MODVERSIONS
cmd_cc_o_c = $(CC) $(c_flags) -c -o $@ $<

else

cmd_cc_o_c = $(CC) $(c_flags) -c -o $(@D)/.tmp_$(@F) $<
	cmd_modversions =
	        if $(OBJDUMP) -h $(@D)/.tmp_$(@F) | grep -q __ksymtab; then


ok. I think you can know what was happened now.


1.3 how to use cmd_modversions

You had known this command is depended on CONFIG_MODVERSIONS


yuan_zc@troy-Lenovo-Product:~/linaro/work_dir/torvald_master/src$ grep -nrI
'KBUILD_BUILTIN'  . --include=Make*
./Makefile:312:KBUILD_BUILTIN := 1
./Makefile:320:  KBUILD_BUILTIN := $(if $(CONFIG_MODVERSIONS),1)
./Makefile:335:export KBUILD_MODULES KBUILD_BUILTIN
./Makefile:1106:modules: $(vmlinux-dirs) $(if $(KBUILD_BUILTIN),vmlinux)
modules.builtin
./scripts/Makefile.build:94:__build: $(if $(KBUILD_BUILTIN),$(builtin-target)
		$(lib-target) $(extra-y)) \

Actually, in Makefile, there is rule relative to CONFIG_MODVERSIONS:

modules: $(vmlinux-dirs) $(if $(KBUILD_BUILTIN),vmlinux) modules.builtin
        $(Q)$(AWK) '!x[$$0]++' $(vmlinux-dirs:%=$(objtree)/%/modules.order) > $(
        @$(kecho) '  Building modules, stage 2.';
        $(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost
	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.fwinst obj=firmware __fw_modb

modules.builtin: $(vmlinux-dirs:%=%/modules.builtin)
	$(Q)$(AWK) '!x[$$0]++' $^ > $(objtree)/modules.builtin

%/modules.builtin: include/config/auto.conf
        $(Q)$(MAKE) $(modbuiltin)=$*



And we can find the definition of modbuiltin in scripts/Kbuild.include :

./scripts/Kbuild.include:181:modbuiltin := -f
$(srctree)/scripts/Makefile.modbuiltin obj


The most important is this rule defined in scripts/Makefile.build :

define rule_cc_o_c
        $(call echo-cmd,checksrc) $(cmd_checksrc)                         \
        $(call echo-cmd,cc_o_c) $(cmd_cc_o_c);				\
        $(cmd_modversions) 		\
        $(call echo-cmd,record_mcount) 			\
        $(cmd_record_mcount) 				\
        scripts/basic/fixdep $(depfile) $@ '$(call make-cmd,cc_o_c)' >    \
                                                 $(dot-target).tmp; 	\
        rm -f $(depfile); \
        mv -f $(dot-target).tmp $(dot-target).cmd
endef

The 'dot-target' is defined in scripts/Kbuild.include :
dot-target = $(dir $@).$(notdir $@)

OK. The real call for rule_cc_o_c is based on this rule in
scripts/Makefile.build :

# Built-in and composite module parts
$(obj)/%.o: $(src)/%.c $(recordmcount_source) FORCE
        $(call cmd,force_checksrc)
        $(call if_changed_rule,cc_o_c)



For the issue about modversions, you can refer to:

http://blog.oasisfeng.com/2008/08/12/all-about-modversions/

http://blog.sina.com.cn/s/blog_602f87700100lg8m.html

2. function of printk

asmlinkage __visible int printk(const char *fmt, ...)

For arm64, the function parameters are transferred in stack, I think.

va_list, va_start, va_end can take a look at acenv.h; This is just a
reference, the real implementations should be in compiler builtin. Please
refer to stdarg.h of GCC if you want to trace it.


In fact, the core is these lines:

	vprintk_func = this_cpu_read(printk_func);
	r = vprintk_func(fmt, args);

in printk.c, PER_CPU variable is defined :
	DEFINE_PER_CPU(printk_func_t, printk_func) = vprintk_default;

int vprintk_default(const char *fmt, va_list args)
{
	int r;

#ifdef CONFIG_KGDB_KDB
	if (unlikely(kdb_trap_printk)) {
		r = vkdb_printf(KDB_MSGSRC_PRINTK, fmt, args);
		return r;
	}
#endif
	r = vprintk_emit(0, LOGLEVEL_DEFAULT, NULL, 0, fmt, args);

	return r;
}

We just skip the branch for KGDB_KDB. So,
	vprintk_emit(0, LOGLEVEL_DEFAULT, NULL, 0, fmt, args);






3. How to set the log level

There is one array to store the LOGLEVEL. It is:

int console_printk[4] = {
	CONSOLE_LOGLEVEL_DEFAULT,	/* console_loglevel */
	MESSAGE_LOGLEVEL_DEFAULT,	/* default_message_loglevel */
	CONSOLE_LOGLEVEL_MIN,		/* minimum_console_loglevel */
	CONSOLE_LOGLEVEL_DEFAULT,	/* default_console_loglevel */
};

This global array is defined in kernel/printk/printk.c

The more used is this macro:
#define console_loglevel (console_printk[0])

It is the aliase of console_printk[0]

3.1 kernel-parameter

early_param("loglevel", loglevel);

By this way, only :
console_loglevel = newlevel;

You can find the loglevel function in init/main.c;


3.2 configure the console_printk[]

#if defined CONFIG_PRINTK
	{
		.procname	= "printk",
		.data		= &console_loglevel,
		.maxlen		= 4*sizeof(int),
		.mode		= 0644,
		.proc_handler	= proc_dointvec,
	},

in kernel/sysctl.c

This entry correspond to '/proc/sys/kernel/printk';

The four values are corresponding to the console_printk[4];

3.3 ignore the console_printk[0]


early_param("ignore_loglevel", ignore_loglevel_setup);
module_param(ignore_loglevel, bool, S_IRUGO | S_IWUSR);

you can use kernel parameter of 'ignore_loglevel' or modify the module
parameter in /sys/module/printk/parameters/ignore_loglevel

the process can refer to call_console_drivers in printk.c


