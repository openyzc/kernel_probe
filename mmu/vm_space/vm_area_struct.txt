

struct vm_area_struct is an very important structure for VM management.

struct vm_area_struct {
/* The range of this VM. 'vm_end' is exclusive. */
	unsigned long vm_start;		/* Our start address within vm_mm. */
	unsigned long vm_end;		/* The first byte after our end address
					   within vm_mm. */
/* task mm_struct 下的所有VMAs 构成的链表. */
	struct vm_area_struct *vm_next, *vm_prev;
/* 通过此节点 link到 mm_struct 下的 struct rb_root mm_rb 为root的 RB tree. */
	struct rb_node vm_rb;

	...
/* 此节点 'struct rb_node rb;' 将当前VMA 挂到 vma->vm_file->f_mapping下的
 * 'struct rb_root	i_mmap' RB tree中, 表示该 file下mapped哪些VMAs.
 * 因此只是用于 file mapping, 关联到 struct file下的 struct address_space
 * *指向的struct address_space. You can refer to vma_link --> __vma_link_file*/
	struct {
		struct rb_node rb;
		unsigned long rb_subtree_last;
	} shared;

/* 属于此VMA的所有 struct anon_vma_chain 节点构成的list. 对于 anonymous mapping,
 * kenerl 不使用 struct address_space中的 struct rb_root
 * i_mmap为root来链接所有的anonymous VMAs，而是使用了 struct anon_vma
 * 中的'struct rb_root rb_root;'为root来构建 RB tree. 该tree下的节点是 struct
 * anon_vma_chain, 通过 成员 'struct rb_node rb;' 挂到某个
 * vma->anon_vma.rb_root下.  An anonymous MAP_PRIVATE, stack or brk vma(with
 * NULL file) can only be in an anon_vma list. 可以参考 anon_vma_chain_link()和
 * do_anonymous_page(). */
	struct list_head anon_vma_chain; /* Serialized by mmap_sem &
					  * page_table_lock */
	struct anon_vma *anon_vma;	/* Serialized by page_table_lock */

不管 anonymous还是 file mapping, 所分配的 VMA都是来自于 mm_struct
中的user-space空间. 只是 file mapping 会将VMAs聚合到 struct file
中'f_mapping'指向的 struct address_space . 实际上, 每个file的 f_mapping
都指向同一个inode中的 struct address_space.




