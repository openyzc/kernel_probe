       shmat() attaches the System V shared memory segment identified by shmid
       to the address space of the calling process.  The attaching address  is
       specified by shmaddr with one of the following criteria:

       If  shmaddr  is NULL, the system chooses a suitable (unused) address at
       which to attach the segment.

       If shmaddr isn't NULL and SHM_RND is specified in  shmflg,  the  attach
       occurs at the address equal to shmaddr rounded down to the nearest mul‐
       tiple of SHMLBA.  Otherwise shmaddr must be a page-aligned  address  at
       which the attach occurs.


SYSCALL_DEFINE3(shmat, int, shmid, char __user *, shmaddr, int, shmflg)
{
	unsigned long ret;
	long err;

	err = do_shmat(shmid, shmaddr, shmflg, &ret, SHMLBA);
	if (err)
		return err;
	force_successful_syscall_return();
	return (long)ret;
}


1. decide the 'addr' for this shmat()

1.1 input 'addr' is NULL

Can't input SHM_REMAP in 'shmflg':

	if ((shmflg & SHM_REMAP))
		goto out;

1.2 input 'addr' is non-NULL

	if (addr & (shmlba - 1))
			if ((shmflg & SHM_RND) && addr >= shmlba)
				addr &= ~(shmlba - 1);
/* when 'addr' is not aligned with SHMLBA, it is better to call shmat with
 * SHM_RND. Otherwise, probably will return ERROR. */
			else
#ifndef __ARCH_FORCE_SHMLBA
				if (addr & ~PAGE_MASK)
#endif
					goto out;

/* For non-NULL 'addr', the flags will be set with MAP_FIXED. BTW, MAP_SHARED is
 * set by default for shmat(). */
		flags |= MAP_FIXED;


2. set the access right

depends on the input 'shmflg'.

3. Get the corresponding 'struct shmid_kernel' with the input 'shmid'

	shp = shm_obtain_object_check(ns, shmid);

ipc_obtain_object_check(&shm_ids(ns), id)
	--> ipc_obtain_object_idr(ids, id)
	/* find the matched 'struct kern_ipc_perm' from ids->ipcs_idr */
		--> out = idr_find(&ids->ipcs_idr, lid)
	/* check 'uid / SEQ_MULTIPLIER != ipcp->seq'. 'ipc' is the return of
	 * idr_find(). */
	--> ipc_checkid(out, id)

This step is very important as all the later processings are depended on this
'struct shmid_kernel'.

4. check the access protection

	ipcperms(ns, &shp->shm_perm, acc_mode)

the input 'acc_mode' will be checked with the 'shp->shm_perm.mode';

5. alloc_file() for this shmat

	file = alloc_file(&path, f_mode,
			  is_file_hugepages(shp->shm_file) ?
				&shm_file_operations_huge :
				&shm_file_operations);

Please keep in mind that:
1) a 'struct shm_file_data' node is initialised

	file->private_data = sfd;
	file->f_mapping = shp->shm_file->f_mapping;
	sfd->id = shp->shm_perm.id;
	sfd->ns = get_ipc_ns(ns);
	sfd->file = shp->shm_file;
	sfd->vm_ops = NULL;
You can find the 'file' in 'struct shm_file_data' will be set as 'shp->shm_file'
which is created by shmget() --> newseg().

2) as for how to initialise the 'vm_ops'

There are three 'vm_ops':

vma->vm_ops;

In shmem_mmap():
	vma->vm_ops = &shmem_vm_ops;


sfd->vm_ops;

Then in shm_mmap():
	sfd->vm_ops = vma->vm_ops;

So, the 'sfd->vm_ops' will be set as 'shmem_vm_ops';
But just after this assignment, the vma->vm_ops will be updated as:

	vma->vm_ops = &shm_vm_ops;

Anyway, the SHM mapping is not anonymous mode, as vma->vm_ops is not NULL.

Who can tell me why????

6. do_mmap_pgoff

shm_mmap()
	--> call_mmap(sfd->file, vma)
		--> file->f_op->mmap(file, vma)


Here, 'file' points to the one which is created by shmget() --> newsg().



=======How to apply the SHM? =============

int shmget(key_t key, size_t size, int shmflg);

void *shmat(int shmid, const void *shmaddr, int shmflg);


1) There is no shared memory size when calling shmat();
   The 'size' is decided by the shmget() when create the shared segement;
2) How to create the input parameter of 'key_t key' for shmget()?

ftok()


=======Where to setup the 'struct vm_area_struct' for the SHM mapping??

shmat()
	--> do_mmap_pgoff()
		--> do_mmap()
			--> mmap_region()

Then in this mmap_region:
		vma->vm_file = get_file(file);




