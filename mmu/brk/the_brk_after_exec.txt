

In load_elf_binary(), the 'mm->start_brk' and 'mm->brk' will be set to same
value:

static int set_brk(unsigned long start, unsigned long end, int prot)
{
	...
	current->mm->start_brk = current->mm->brk = end;
	return 0;
}

	if ((current->flags & PF_RANDOMIZE) && (randomize_va_space > 1)) {
		current->mm->brk = current->mm->start_brk =
			arch_randomize_brk(current->mm);
#ifdef compat_brk_randomized
		current->brk_randomized = 1;
#endif
	}

So, To know what the 'mm->brk' points to, we need to trace
'arch_randomize_brk(current->mm)'.


On x86,

unsigned long arch_randomize_brk(struct mm_struct *mm)
{
	return randomize_page(mm->brk, 0x02000000);
}


unsigned long
randomize_page(unsigned long start, unsigned long range)
{
	if (!PAGE_ALIGNED(start)) {
		range -= PAGE_ALIGN(start) - start;
		start = PAGE_ALIGN(start);
	}

	if (start > ULONG_MAX - range)
		range = ULONG_MAX - start;

	range >>= PAGE_SHIFT;

	if (range == 0)
		return start;

	return start + (get_random_long() % range << PAGE_SHIFT);
}

So, the final mm->start_brk / mm->brk will have an offset whose value is
randomized.

That randomized value should <= 32M and aligne to PAGE boundary.


