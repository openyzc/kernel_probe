For ioremap, the physical address doesn't need to allocate from the buddy
system. It is known by the caller.


The ioremap will allocate the VM address from VMALLOC region, VMALLOC_START,
VMALLOC_END.


struct vm_struct *area;

area = get_vm_area_caller(size, VM_IOREMAP, caller);
	--> addr = get_unmapped_area(file, addr, len, pgoff, flags);
	--> addr = mmap_region(file, addr, len, vm_flags, pgoff, uf);


current->mm->get_unmapped_area will be initialised by :

void setup_new_exec(struct linux_binprm * bprm)
{
	arch_pick_mmap_layout(current->mm);
	...

For some file system, the file-specific 'file->f_op->get_unmapped_area' will be
defined, so in get_unmapped_area() will apply that hook in priority:
	get_area = current->mm->get_unmapped_area;
	if (file) {
		if (file->f_op->get_unmapped_area)
			get_area = file->f_op->get_unmapped_area;
	} else if (flags & MAP_SHARED) {
		/*
		 * mmap_region() will call shmem_zero_setup() to create a file,
		 * so use shmem's get_unmapped_area in case it can be huge.
		 * do_mmap_pgoff() will clear pgoff, so match alignment.
		 */
		pgoff = 0;
		get_area = shmem_get_unmapped_area;
	}


For ANONYMOUS mapping, 'pgoff' doesn't make sense.






